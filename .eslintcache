[{"C:\\Users\\yahya balti\\Documents\\react\\newtodo\\src\\App.js":"1","C:\\Users\\yahya balti\\Documents\\react\\newtodo\\src\\reportWebVitals.js":"2","C:\\Users\\yahya balti\\Documents\\react\\newtodo\\src\\index.js":"3"},{"size":4662,"mtime":1612725885926,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1612159862738,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1612374371573,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1epmro1",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\yahya balti\\Documents\\react\\newtodo\\src\\App.js",["15","16"],"import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\n\nfunction App() {\n  const [inputVal, setInputVal] = useState(\"\");\n  const [inputVal2, setInputVal2] = useState(\"\");\n  const [realArr, setRealArr] = useState([]);\n  const [undoArr, setUndoArr] = useState([]);\n  const [redoArr, setredoArr] = useState([]);\n  const [temp, setTemp] = useState(0);\n  const [num, setNum] = useState(false);\n  const [undoNum, setUndoNum] = useState(false)\n  const [redoNum, setRedoNum] = useState(false)\n  const [object, setObject] = useState(false)\n  const [submitNum, setSubmitNum] = useState(false)\n  // const [input, setInput] = useState(false)\n  // const [checked, setChecked] = useState(false)\n  const [tempNum, setTempNum] = useState(false)\n  \n  useEffect(() => {\n    setRedoNum(true)\n    setUndoNum(true)\n    setTempNum(temp)\n    let undoArr2 = [...undoArr];\n    undoArr2.push(realArr);\n    setUndoArr(undoArr2);\n  }, [temp]);\n  \n\n  useEffect(() => {\n    let object2;\n    object2 = {input1: inputVal, input2: inputVal2}\n    setObject(object2)\n  }, [inputVal, inputVal2]);\n  \n\n  const submit = () => {\n    setObject({input1: inputVal, input2: inputVal2})\n    let submitArr = [...realArr];\n    submitArr.push(object);\n    setRealArr(submitArr);\n    setTemp(temp + 1);\n    setSubmitNum(submitNum+1)\n    setInputVal(\"\");\n    setInputVal2(\"\");\n  };\n\n\n  const edit = (index) => {\n    setInputVal(realArr[index].input1);\n    setInputVal2(realArr[index].input2);\n    setNum(index);\n  };\n\n\n  const del = (index) => {\n    setRealArr(realArr.filter((item2, index2) => index2 !== index));\n    setTemp(temp + 1);\n  };\n\n\n  const update = () => {\n    let updateArr = [...realArr];\n    updateArr[num].input1 = inputVal;\n    updateArr[num].input2 = inputVal2;\n    setRealArr(updateArr);\n    setTemp(temp + 1);\n    setInputVal(\"\");\n    setInputVal2(\"\");\n    setNum(false);\n  };\n  \n\n  const undo = () => {\n    setTempNum(false)\n    setUndoNum(undoNum+1)\n    setInputVal(\"\")\n    setNum(false)\n    let redoArr2 = [...redoArr];\n    redoArr2.push(undoArr[undoArr.length - 1]);\n    setRealArr(undoArr[undoArr.length-2])\n    setredoArr(redoArr2);\n    let undoArr2 = [...undoArr];\n    undoArr2.pop();\n    setUndoArr(undoArr2);\n  };\n\n\n  const redo = () => {\n    setTempNum(false)\n    setRedoNum(redoNum + 1)\n    setInputVal(\"\")\n    setNum(false)\n    setRealArr(redoArr[redoArr?.length - 1]);\n    let undoArr2 = [...undoArr];\n    if (redoArr[redoArr?.length - 1])\n    undoArr2.push(redoArr[redoArr?.length - 1]);\n    setUndoArr(undoArr2);\n    let redoArr2 = [...redoArr];\n    redoArr2.pop();\n    setredoArr(redoArr2);\n  };\n\n  \n  useEffect(()=>{\n    \n  },[redoNum, undoNum])\n\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    num || num === 0 ?\n    update()\n    :\n    submit();\n  };\n\n\n  // const check = () => {\n  //   if(checked === false){\n  //     setChecked(true)\n  //     realArr?.input1.sort((a,b) => {\n  //       if(a < b)\n  //       return 1\n  //       else \n  //       return -1\n  //     })\n  //     console.log(realArr?.input1)\n  //   }\n  //   else{\n  //     setChecked(false)\n  //   }\n  // }\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"text\">\n        <h1>TODO LIST</h1>\n        <form className=\"form\" onSubmit={onSubmit}>\n          <h3>ID Number</h3>\n          <input className=\"input\" type=\"text\" value={inputVal} \n          onChange={(e) => setInputVal(e.target.value)}/>\n          <h3>Name</h3>\n          <input className=\"input\" type=\"text\" value={inputVal2} \n          onChange={(a) => setInputVal2(a.target.value)}/>\n          {!num && num !== 0 ? (\n            <button className=\"button submit\" type=\"submit\">Submit</button>\n          ) : (\n            <button className=\"button submit\" type=\"submit\">Update</button>\n          )}\n        </form>\n        {realArr.map((item, index) => (\n          <p key={index}>\n            {item?.input1}\n            &nbsp; &nbsp; &nbsp;\n            {item?.input2}\n            <button className=\"button edit\" onClick={() => edit(index)}>Edit</button>\n            <button className=\"button edit\" onClick={() => del(index)}>Delete</button>\n          </p>\n        ))}\n      </div>\n      <div className=\"buttons\">\n        <button className=\"button\" onClick={() => undo()} disabled={undoArr?.length < 2}>\n          undo\n        </button>\n        <button className=\"button\" onClick={() => redo()} disabled={!redoArr?.length}>\n          redo\n        </button>\n        {/* <form>\n          <label>\n          <input type=\"radio\" name=\"sort\" onClick={() => check()} onChange={() => check()}\n          checked={checked} value={input}/>sort</label>\n        </form> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","C:\\Users\\yahya balti\\Documents\\react\\newtodo\\src\\reportWebVitals.js",[],"C:\\Users\\yahya balti\\Documents\\react\\newtodo\\src\\index.js",[],{"ruleId":"17","severity":1,"message":"18","line":19,"column":10,"nodeType":"19","messageId":"20","endLine":19,"endColumn":17},{"ruleId":"21","severity":1,"message":"22","line":28,"column":6,"nodeType":"23","endLine":28,"endColumn":12,"suggestions":"24"},"no-unused-vars","'tempNum' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'realArr' and 'undoArr'. Either include them or remove the dependency array.","ArrayExpression",["25"],{"desc":"26","fix":"27"},"Update the dependencies array to be: [realArr, temp, undoArr]",{"range":"28","text":"29"},[925,931],"[realArr, temp, undoArr]"]